{"id":"Cbl8","dependencies":[{"name":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\package.json","includedInParent":true,"mtime":1750141916701},{"name":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\package.json","includedInParent":true,"mtime":1749531474589},{"name":"./Control.js","loc":{"line":17,"column":20,"index":650},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\control\\MousePosition.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\control\\Control.js"},{"name":"../pointer/EventType.js","loc":{"line":18,"column":22,"index":688},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\control\\MousePosition.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\pointer\\EventType.js"},{"name":"../Object.js","loc":{"line":19,"column":35,"index":750},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\control\\MousePosition.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\Object.js"},{"name":"../proj.js","loc":{"line":20,"column":105,"index":871},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\control\\MousePosition.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\proj.js"},{"name":"../events.js","loc":{"line":21,"column":23,"index":908},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\control\\MousePosition.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\events.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _Control = _interopRequireDefault(require(\"./Control.js\"));\nvar _EventType = _interopRequireDefault(require(\"../pointer/EventType.js\"));\nvar _Object = require(\"../Object.js\");\nvar _proj = require(\"../proj.js\");\nvar _events = require(\"../events.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n/**\n * @module ol/control/MousePosition\n */\nvar __extends = void 0 && (void 0).__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @type {string}\n */\nvar PROJECTION = 'projection';\n/**\n * @type {string}\n */\nvar COORDINATE_FORMAT = 'coordinateFormat';\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-mouse-position'] CSS class name.\n * @property {import(\"../coordinate.js\").CoordinateFormat} [coordinateFormat] Coordinate format.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the\n * control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {string} [undefinedHTML='&#160;'] Markup to show when coordinates are not\n * available (e.g. when the pointer leaves the map viewport).  By default, the last position\n * will be replaced with `'&#160;'` (`&nbsp;`) when the pointer leaves the viewport.  To\n * retain the last rendered position, set this option to something falsey (like an empty\n * string `''`).\n */\n/**\n * @classdesc\n * A control to show the 2D coordinates of the mouse cursor. By default, these\n * are in the view projection, but can be in any supported projection.\n * By default the control is shown in the top right corner of the map, but this\n * can be changed by using the css selector `.ol-mouse-position`.\n *\n * On touch devices, which usually do not have a mouse cursor, the coordinates\n * of the currently touched position are shown.\n *\n * @api\n */\nvar MousePosition = /** @class */function (_super) {\n  __extends(MousePosition, _super);\n  /**\n   * @param {Options=} opt_options Mouse position options.\n   */\n  function MousePosition(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    var element = document.createElement('div');\n    element.className = options.className !== undefined ? options.className : 'ol-mouse-position';\n    _this = _super.call(this, {\n      element: element,\n      render: options.render,\n      target: options.target\n    }) || this;\n    _this.addEventListener((0, _Object.getChangeEventType)(PROJECTION), _this.handleProjectionChanged_);\n    if (options.coordinateFormat) {\n      _this.setCoordinateFormat(options.coordinateFormat);\n    }\n    if (options.projection) {\n      _this.setProjection(options.projection);\n    }\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.undefinedHTML_ = options.undefinedHTML !== undefined ? options.undefinedHTML : '&#160;';\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.renderOnMouseOut_ = !!_this.undefinedHTML_;\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.renderedHTML_ = element.innerHTML;\n    /**\n     * @private\n     * @type {?import(\"../proj/Projection.js\").default}\n     */\n    _this.mapProjection_ = null;\n    /**\n     * @private\n     * @type {?import(\"../proj.js\").TransformFunction}\n     */\n    _this.transform_ = null;\n    return _this;\n  }\n  /**\n   * @private\n   */\n  MousePosition.prototype.handleProjectionChanged_ = function () {\n    this.transform_ = null;\n  };\n  /**\n   * Return the coordinate format type used to render the current position or\n   * undefined.\n   * @return {import(\"../coordinate.js\").CoordinateFormat|undefined} The format to render the current\n   *     position in.\n   * @observable\n   * @api\n   */\n  MousePosition.prototype.getCoordinateFormat = function () {\n    return /** @type {import(\"../coordinate.js\").CoordinateFormat|undefined} */this.get(COORDINATE_FORMAT);\n  };\n  /**\n   * Return the projection that is used to report the mouse position.\n   * @return {import(\"../proj/Projection.js\").default|undefined} The projection to report mouse\n   *     position in.\n   * @observable\n   * @api\n   */\n  MousePosition.prototype.getProjection = function () {\n    return /** @type {import(\"../proj/Projection.js\").default|undefined} */this.get(PROJECTION);\n  };\n  /**\n   * @param {MouseEvent} event Browser event.\n   * @protected\n   */\n  MousePosition.prototype.handleMouseMove = function (event) {\n    var map = this.getMap();\n    this.updateHTML_(map.getEventPixel(event));\n  };\n  /**\n   * @param {Event} event Browser event.\n   * @protected\n   */\n  MousePosition.prototype.handleMouseOut = function (event) {\n    this.updateHTML_(null);\n  };\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @api\n   */\n  MousePosition.prototype.setMap = function (map) {\n    _super.prototype.setMap.call(this, map);\n    if (map) {\n      var viewport = map.getViewport();\n      this.listenerKeys.push((0, _events.listen)(viewport, _EventType.default.POINTERMOVE, this.handleMouseMove, this));\n      if (this.renderOnMouseOut_) {\n        this.listenerKeys.push((0, _events.listen)(viewport, _EventType.default.POINTEROUT, this.handleMouseOut, this));\n      }\n    }\n  };\n  /**\n   * Set the coordinate format type used to render the current position.\n   * @param {import(\"../coordinate.js\").CoordinateFormat} format The format to render the current\n   *     position in.\n   * @observable\n   * @api\n   */\n  MousePosition.prototype.setCoordinateFormat = function (format) {\n    this.set(COORDINATE_FORMAT, format);\n  };\n  /**\n   * Set the projection that is used to report the mouse position.\n   * @param {import(\"../proj.js\").ProjectionLike} projection The projection to report mouse\n   *     position in.\n   * @observable\n   * @api\n   */\n  MousePosition.prototype.setProjection = function (projection) {\n    this.set(PROJECTION, (0, _proj.get)(projection));\n  };\n  /**\n   * @param {?import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @private\n   */\n  MousePosition.prototype.updateHTML_ = function (pixel) {\n    var html = this.undefinedHTML_;\n    if (pixel && this.mapProjection_) {\n      if (!this.transform_) {\n        var projection = this.getProjection();\n        if (projection) {\n          this.transform_ = (0, _proj.getTransformFromProjections)(this.mapProjection_, projection);\n        } else {\n          this.transform_ = _proj.identityTransform;\n        }\n      }\n      var map = this.getMap();\n      var coordinate = map.getCoordinateFromPixelInternal(pixel);\n      if (coordinate) {\n        var userProjection = (0, _proj.getUserProjection)();\n        if (userProjection) {\n          this.transform_ = (0, _proj.getTransformFromProjections)(this.mapProjection_, userProjection);\n        }\n        this.transform_(coordinate, coordinate);\n        var coordinateFormat = this.getCoordinateFormat();\n        if (coordinateFormat) {\n          html = coordinateFormat(coordinate);\n        } else {\n          html = coordinate.toString();\n        }\n      }\n    }\n    if (!this.renderedHTML_ || html !== this.renderedHTML_) {\n      this.element.innerHTML = html;\n      this.renderedHTML_ = html;\n    }\n  };\n  /**\n   * Update the projection. Rendering of the coordinates is done in\n   * `handleMouseMove` and `handleMouseUp`.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  MousePosition.prototype.render = function (mapEvent) {\n    var frameState = mapEvent.frameState;\n    if (!frameState) {\n      this.mapProjection_ = null;\n    } else {\n      if (this.mapProjection_ != frameState.viewState.projection) {\n        this.mapProjection_ = frameState.viewState.projection;\n        this.transform_ = null;\n      }\n    }\n  };\n  return MousePosition;\n}(_Control.default);\nvar _default = exports.default = MousePosition;"},"sourceMaps":null,"error":null,"hash":"d19b99741daa4359cf974e2fcf7b37fd","cacheData":{"env":{}}}