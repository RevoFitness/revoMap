{"id":"oCPk","dependencies":[{"name":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\package.json","includedInParent":true,"mtime":1750141916701},{"name":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\package.json","includedInParent":true,"mtime":1749531474589},{"name":"../events/EventType.js","loc":{"line":17,"column":22,"index":645},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\source\\UTFGrid.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\events\\EventType.js"},{"name":"./State.js","loc":{"line":18,"column":24,"index":695},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\source\\UTFGrid.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\source\\State.js"},{"name":"../Tile.js","loc":{"line":19,"column":17,"index":726},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\source\\UTFGrid.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\Tile.js"},{"name":"./Tile.js","loc":{"line":20,"column":23,"index":763},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\source\\UTFGrid.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\source\\Tile.js"},{"name":"../TileState.js","loc":{"line":21,"column":22,"index":798},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\source\\UTFGrid.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\TileState.js"},{"name":"../extent.js","loc":{"line":22,"column":43,"index":860},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\source\\UTFGrid.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\extent.js"},{"name":"../asserts.js","loc":{"line":23,"column":23,"index":899},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\source\\UTFGrid.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\asserts.js"},{"name":"../tileurlfunction.js","loc":{"line":24,"column":57,"index":973},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\source\\UTFGrid.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\tileurlfunction.js"},{"name":"../tilegrid.js","loc":{"line":25,"column":48,"index":1046},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\source\\UTFGrid.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\tilegrid.js"},{"name":"../tilecoord.js","loc":{"line":26,"column":26,"index":1090},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\source\\UTFGrid.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\tilecoord.js"},{"name":"../proj.js","loc":{"line":27,"column":66,"index":1175},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\source\\UTFGrid.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\proj.js"},{"name":"../events.js","loc":{"line":28,"column":27,"index":1216},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\source\\UTFGrid.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\events.js"},{"name":"../net.js","loc":{"line":29,"column":38,"index":1270},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\source\\UTFGrid.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\net.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.CustomTile = void 0;\nvar _EventType = _interopRequireDefault(require(\"../events/EventType.js\"));\nvar _State = _interopRequireDefault(require(\"./State.js\"));\nvar _Tile = _interopRequireDefault(require(\"../Tile.js\"));\nvar _Tile2 = _interopRequireDefault(require(\"./Tile.js\"));\nvar _TileState = _interopRequireDefault(require(\"../TileState.js\"));\nvar _extent = require(\"../extent.js\");\nvar _asserts = require(\"../asserts.js\");\nvar _tileurlfunction = require(\"../tileurlfunction.js\");\nvar _tilegrid = require(\"../tilegrid.js\");\nvar _tilecoord = require(\"../tilecoord.js\");\nvar _proj = require(\"../proj.js\");\nvar _events = require(\"../events.js\");\nvar _net = require(\"../net.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n/**\n * @module ol/source/UTFGrid\n */\nvar __extends = void 0 && (void 0).__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @typedef {Object} UTFGridJSON\n * @property {Array<string>} grid The grid.\n * @property {Array<string>} keys The keys.\n * @property {Object<string, Object>} [data] Optional data.\n */\nvar CustomTile = exports.CustomTile = /** @class */function (_super) {\n  __extends(CustomTile, _super);\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {import(\"../extent.js\").Extent} extent Extent of the tile.\n   * @param {boolean} preemptive Load the tile when visible (before it's needed).\n   * @param {boolean} jsonp Load the tile as a script.\n   */\n  function CustomTile(tileCoord, state, src, extent, preemptive, jsonp) {\n    var _this = _super.call(this, tileCoord, state) || this;\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.src_ = src;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    _this.extent_ = extent;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.preemptive_ = preemptive;\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    _this.grid_ = null;\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    _this.keys_ = null;\n    /**\n     * @private\n     * @type {Object<string, Object>|undefined}\n     */\n    _this.data_ = null;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.jsonp_ = jsonp;\n    return _this;\n  }\n  /**\n   * Get the image element for this tile.\n   * @return {HTMLImageElement} Image.\n   */\n  CustomTile.prototype.getImage = function () {\n    return null;\n  };\n  /**\n   * Synchronously returns data at given coordinate (if available).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {*} The data.\n   */\n  CustomTile.prototype.getData = function (coordinate) {\n    if (!this.grid_ || !this.keys_) {\n      return null;\n    }\n    var xRelative = (coordinate[0] - this.extent_[0]) / (this.extent_[2] - this.extent_[0]);\n    var yRelative = (coordinate[1] - this.extent_[1]) / (this.extent_[3] - this.extent_[1]);\n    var row = this.grid_[Math.floor((1 - yRelative) * this.grid_.length)];\n    if (typeof row !== 'string') {\n      return null;\n    }\n    var code = row.charCodeAt(Math.floor(xRelative * row.length));\n    if (code >= 93) {\n      code--;\n    }\n    if (code >= 35) {\n      code--;\n    }\n    code -= 32;\n    var data = null;\n    if (code in this.keys_) {\n      var id = this.keys_[code];\n      if (this.data_ && id in this.data_) {\n        data = this.data_[id];\n      } else {\n        data = id;\n      }\n    }\n    return data;\n  };\n  /**\n   * Calls the callback (synchronously by default) with the available data\n   * for given coordinate (or `null` if not yet loaded).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(*): void} callback Callback.\n   * @param {boolean=} opt_request If `true` the callback is always async.\n   *                               The tile data is requested if not yet loaded.\n   */\n  CustomTile.prototype.forDataAtCoordinate = function (coordinate, callback, opt_request) {\n    if (this.state == _TileState.default.EMPTY && opt_request === true) {\n      this.state = _TileState.default.IDLE;\n      (0, _events.listenOnce)(this, _EventType.default.CHANGE, function (e) {\n        callback(this.getData(coordinate));\n      }, this);\n      this.loadInternal_();\n    } else {\n      if (opt_request === true) {\n        setTimeout(function () {\n          callback(this.getData(coordinate));\n        }.bind(this), 0);\n      } else {\n        callback(this.getData(coordinate));\n      }\n    }\n  };\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n  CustomTile.prototype.getKey = function () {\n    return this.src_;\n  };\n  /**\n   * @private\n   */\n  CustomTile.prototype.handleError_ = function () {\n    this.state = _TileState.default.ERROR;\n    this.changed();\n  };\n  /**\n   * @param {!UTFGridJSON} json UTFGrid data.\n   * @private\n   */\n  CustomTile.prototype.handleLoad_ = function (json) {\n    this.grid_ = json['grid'];\n    this.keys_ = json['keys'];\n    this.data_ = json['data'];\n    this.state = _TileState.default.LOADED;\n    this.changed();\n  };\n  /**\n   * @private\n   */\n  CustomTile.prototype.loadInternal_ = function () {\n    if (this.state == _TileState.default.IDLE) {\n      this.state = _TileState.default.LOADING;\n      if (this.jsonp_) {\n        (0, _net.jsonp)(this.src_, this.handleLoad_.bind(this), this.handleError_.bind(this));\n      } else {\n        var client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', this.src_);\n        client.send();\n      }\n    }\n  };\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  CustomTile.prototype.onXHRLoad_ = function (event) {\n    var client = /** @type {XMLHttpRequest} */event.target;\n    // status will be 0 for file:// urls\n    if (!client.status || client.status >= 200 && client.status < 300) {\n      var response = void 0;\n      try {\n        response = /** @type {!UTFGridJSON} */JSON.parse(client.responseText);\n      } catch (err) {\n        this.handleError_();\n        return;\n      }\n      this.handleLoad_(response);\n    } else {\n      this.handleError_();\n    }\n  };\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  CustomTile.prototype.onXHRError_ = function (event) {\n    this.handleError_();\n  };\n  /**\n   */\n  CustomTile.prototype.load = function () {\n    if (this.preemptive_) {\n      this.loadInternal_();\n    } else {\n      this.setState(_TileState.default.EMPTY);\n    }\n  };\n  return CustomTile;\n}(_Tile.default);\n/**\n * @typedef {Object} Options\n * @property {boolean} [preemptive=true]\n * If `true` the UTFGrid source loads the tiles based on their \"visibility\".\n * This improves the speed of response, but increases traffic.\n * Note that if set to `false` (lazy loading), you need to pass `true` as\n * `opt_request` to the `forDataAtCoordinateAndResolution` method otherwise no\n * data will ever be loaded.\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\n * Useful when the server does not support CORS..\n * @property {import(\"./TileJSON.js\").Config} [tileJSON] TileJSON configuration for this source.\n * If not provided, `url` must be configured.\n * @property {string} [url] TileJSON endpoint that provides the configuration for this source.\n * Request will be made through JSONP. If not provided, `tileJSON` must be configured.\n */\n/**\n * @classdesc\n * Layer source for UTFGrid interaction data loaded from TileJSON format.\n * @api\n */\nvar UTFGrid = /** @class */function (_super) {\n  __extends(UTFGrid, _super);\n  /**\n   * @param {Options} options Source options.\n   */\n  function UTFGrid(options) {\n    var _this = _super.call(this, {\n      projection: (0, _proj.get)('EPSG:3857'),\n      state: _State.default.LOADING\n    }) || this;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.preemptive_ = options.preemptive !== undefined ? options.preemptive : true;\n    /**\n     * @private\n     * @type {!import(\"../Tile.js\").UrlFunction}\n     */\n    _this.tileUrlFunction_ = _tileurlfunction.nullTileUrlFunction;\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    _this.template_ = undefined;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.jsonp_ = options.jsonp || false;\n    if (options.url) {\n      if (_this.jsonp_) {\n        (0, _net.jsonp)(options.url, _this.handleTileJSONResponse.bind(_this), _this.handleTileJSONError.bind(_this));\n      } else {\n        var client = new XMLHttpRequest();\n        client.addEventListener('load', _this.onXHRLoad_.bind(_this));\n        client.addEventListener('error', _this.onXHRError_.bind(_this));\n        client.open('GET', options.url);\n        client.send();\n      }\n    } else if (options.tileJSON) {\n      _this.handleTileJSONResponse(options.tileJSON);\n    } else {\n      (0, _asserts.assert)(false, 51); // Either `url` or `tileJSON` options must be provided\n    }\n    return _this;\n  }\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  UTFGrid.prototype.onXHRLoad_ = function (event) {\n    var client = /** @type {XMLHttpRequest} */event.target;\n    // status will be 0 for file:// urls\n    if (!client.status || client.status >= 200 && client.status < 300) {\n      var response = void 0;\n      try {\n        response = /** @type {import(\"./TileJSON.js\").Config} */JSON.parse(client.responseText);\n      } catch (err) {\n        this.handleTileJSONError();\n        return;\n      }\n      this.handleTileJSONResponse(response);\n    } else {\n      this.handleTileJSONError();\n    }\n  };\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  UTFGrid.prototype.onXHRError_ = function (event) {\n    this.handleTileJSONError();\n  };\n  /**\n   * Return the template from TileJSON.\n   * @return {string|undefined} The template from TileJSON.\n   * @api\n   */\n  UTFGrid.prototype.getTemplate = function () {\n    return this.template_;\n  };\n  /**\n   * Calls the callback (synchronously by default) with the available data\n   * for given coordinate and resolution (or `null` if not yet loaded or\n   * in case of an error).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {function(*): void} callback Callback.\n   * @param {boolean=} opt_request If `true` the callback is always async.\n   *                               The tile data is requested if not yet loaded.\n   * @api\n   */\n  UTFGrid.prototype.forDataAtCoordinateAndResolution = function (coordinate, resolution, callback, opt_request) {\n    if (this.tileGrid) {\n      var z = this.tileGrid.getZForResolution(resolution, this.zDirection);\n      var tileCoord = this.tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n      var tile = /** @type {!CustomTile} */this.getTile(tileCoord[0], tileCoord[1], tileCoord[2], 1, this.getProjection());\n      tile.forDataAtCoordinate(coordinate, callback, opt_request);\n    } else {\n      if (opt_request === true) {\n        setTimeout(function () {\n          callback(null);\n        }, 0);\n      } else {\n        callback(null);\n      }\n    }\n  };\n  /**\n   * @protected\n   */\n  UTFGrid.prototype.handleTileJSONError = function () {\n    this.setState(_State.default.ERROR);\n  };\n  /**\n   * TODO: very similar to ol/source/TileJSON#handleTileJSONResponse\n   * @protected\n   * @param {import(\"./TileJSON.js\").Config} tileJSON Tile JSON.\n   */\n  UTFGrid.prototype.handleTileJSONResponse = function (tileJSON) {\n    var epsg4326Projection = (0, _proj.get)('EPSG:4326');\n    var sourceProjection = this.getProjection();\n    var extent;\n    if (tileJSON['bounds'] !== undefined) {\n      var transform = (0, _proj.getTransformFromProjections)(epsg4326Projection, sourceProjection);\n      extent = (0, _extent.applyTransform)(tileJSON['bounds'], transform);\n    }\n    var minZoom = tileJSON['minzoom'] || 0;\n    var maxZoom = tileJSON['maxzoom'] || 22;\n    var tileGrid = (0, _tilegrid.createXYZ)({\n      extent: (0, _tilegrid.extentFromProjection)(sourceProjection),\n      maxZoom: maxZoom,\n      minZoom: minZoom\n    });\n    this.tileGrid = tileGrid;\n    this.template_ = tileJSON['template'];\n    var grids = tileJSON['grids'];\n    if (!grids) {\n      this.setState(_State.default.ERROR);\n      return;\n    }\n    this.tileUrlFunction_ = (0, _tileurlfunction.createFromTemplates)(grids, tileGrid);\n    if (tileJSON['attribution'] !== undefined) {\n      var attributionExtent_1 = extent !== undefined ? extent : epsg4326Projection.getExtent();\n      this.setAttributions(function (frameState) {\n        if ((0, _extent.intersects)(attributionExtent_1, frameState.extent)) {\n          return [tileJSON['attribution']];\n        }\n        return null;\n      });\n    }\n    this.setState(_State.default.READY);\n  };\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!CustomTile} Tile.\n   */\n  UTFGrid.prototype.getTile = function (z, x, y, pixelRatio, projection) {\n    var tileCoordKey = (0, _tilecoord.getKeyZXY)(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      return this.tileCache.get(tileCoordKey);\n    } else {\n      var tileCoord = [z, x, y];\n      var urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n      var tileUrl = this.tileUrlFunction_(urlTileCoord, pixelRatio, projection);\n      var tile = new CustomTile(tileCoord, tileUrl !== undefined ? _TileState.default.IDLE : _TileState.default.EMPTY, tileUrl !== undefined ? tileUrl : '', this.tileGrid.getTileCoordExtent(tileCoord), this.preemptive_, this.jsonp_);\n      this.tileCache.set(tileCoordKey, tile);\n      return tile;\n    }\n  };\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   */\n  UTFGrid.prototype.useTile = function (z, x, y) {\n    var tileCoordKey = (0, _tilecoord.getKeyZXY)(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  };\n  return UTFGrid;\n}(_Tile2.default);\nvar _default = exports.default = UTFGrid;"},"sourceMaps":null,"error":null,"hash":"09de1c4481b2c45d7f9e9e59c53ebade","cacheData":{"env":{}}}