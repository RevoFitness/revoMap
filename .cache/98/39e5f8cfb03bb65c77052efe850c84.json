{"id":"VqZN","dependencies":[{"name":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\package.json","includedInParent":true,"mtime":1750141916701},{"name":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\package.json","includedInParent":true,"mtime":1749531474589},{"name":"../events/Event.js","loc":{"line":17,"column":22,"index":649},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\layer\\MapboxVector.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\events\\Event.js"},{"name":"../events/EventType.js","loc":{"line":18,"column":22,"index":693},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\layer\\MapboxVector.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\events\\EventType.js"},{"name":"../format/MVT.js","loc":{"line":19,"column":16,"index":735},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\layer\\MapboxVector.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\format\\MVT.js"},{"name":"../source/State.js","loc":{"line":20,"column":24,"index":779},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\layer\\MapboxVector.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\source\\State.js"},{"name":"../layer/VectorTile.js","loc":{"line":21,"column":28,"index":829},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\layer\\MapboxVector.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\layer\\VectorTile.js"},{"name":"../source/VectorTile.js","loc":{"line":22,"column":29,"index":884},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\layer\\MapboxVector.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\source\\VectorTile.js"},{"name":"ol-mapbox-style","loc":{"line":23,"column":27,"index":938},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\layer\\MapboxVector.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol-mapbox-style\\dist\\index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.getMapboxPath = getMapboxPath;\nexports.normalizeGlyphsUrl = normalizeGlyphsUrl;\nexports.normalizeSourceUrl = normalizeSourceUrl;\nexports.normalizeSpriteUrl = normalizeSpriteUrl;\nexports.normalizeStyleUrl = normalizeStyleUrl;\nvar _Event = _interopRequireDefault(require(\"../events/Event.js\"));\nvar _EventType = _interopRequireDefault(require(\"../events/EventType.js\"));\nvar _MVT = _interopRequireDefault(require(\"../format/MVT.js\"));\nvar _State = _interopRequireDefault(require(\"../source/State.js\"));\nvar _VectorTile = _interopRequireDefault(require(\"../layer/VectorTile.js\"));\nvar _VectorTile2 = _interopRequireDefault(require(\"../source/VectorTile.js\"));\nvar _olMapboxStyle = require(\"ol-mapbox-style\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar __extends = void 0 && (void 0).__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/layer/MapboxVector\n */\n\nvar mapboxBaseUrl = 'https://api.mapbox.com';\n/**\n * Gets the path from a mapbox:// URL.\n * @param {string} url The Mapbox URL.\n * @return {string} The path.\n * @private\n */\nfunction getMapboxPath(url) {\n  var startsWith = 'mapbox://';\n  if (url.indexOf(startsWith) !== 0) {\n    return '';\n  }\n  return url.slice(startsWith.length);\n}\n/**\n * Turns mapbox:// sprite URLs into resolvable URLs.\n * @param {string} url The sprite URL.\n * @param {string} token The access token.\n * @return {string} A resolvable URL.\n * @private\n */\nfunction normalizeSpriteUrl(url, token) {\n  var mapboxPath = getMapboxPath(url);\n  if (!mapboxPath) {\n    return url;\n  }\n  var startsWith = 'sprites/';\n  if (mapboxPath.indexOf(startsWith) !== 0) {\n    throw new Error(\"unexpected sprites url: \" + url);\n  }\n  var sprite = mapboxPath.slice(startsWith.length);\n  return mapboxBaseUrl + \"/styles/v1/\" + sprite + \"/sprite?access_token=\" + token;\n}\n/**\n * Turns mapbox:// glyphs URLs into resolvable URLs.\n * @param {string} url The glyphs URL.\n * @param {string} token The access token.\n * @return {string} A resolvable URL.\n * @private\n */\nfunction normalizeGlyphsUrl(url, token) {\n  var mapboxPath = getMapboxPath(url);\n  if (!mapboxPath) {\n    return url;\n  }\n  var startsWith = 'fonts/';\n  if (mapboxPath.indexOf(startsWith) !== 0) {\n    throw new Error(\"unexpected fonts url: \" + url);\n  }\n  var font = mapboxPath.slice(startsWith.length);\n  return mapboxBaseUrl + \"/fonts/v1/\" + font + \"/0-255.pbf?access_token=\" + token;\n}\n/**\n * Turns mapbox:// style URLs into resolvable URLs.\n * @param {string} url The style URL.\n * @param {string} token The access token.\n * @return {string} A resolvable URL.\n * @private\n */\nfunction normalizeStyleUrl(url, token) {\n  var mapboxPath = getMapboxPath(url);\n  if (!mapboxPath) {\n    return url;\n  }\n  var startsWith = 'styles/';\n  if (mapboxPath.indexOf(startsWith) !== 0) {\n    throw new Error(\"unexpected style url: \" + url);\n  }\n  var style = mapboxPath.slice(startsWith.length);\n  return mapboxBaseUrl + \"/styles/v1/\" + style + \"?&access_token=\" + token;\n}\n/**\n * Turns mapbox:// source URLs into vector tile URL templates.\n * @param {string} url The source URL.\n * @param {string} token The access token.\n * @return {string} A vector tile template.\n * @private\n */\nfunction normalizeSourceUrl(url, token) {\n  var mapboxPath = getMapboxPath(url);\n  if (!mapboxPath) {\n    return url;\n  }\n  return \"https://{a-d}.tiles.mapbox.com/v4/\" + mapboxPath + \"/{z}/{x}/{y}.vector.pbf?access_token=\" + token;\n}\n/**\n * @classdesc\n * Event emitted on configuration or loading error.\n */\nvar ErrorEvent = /** @class */function (_super) {\n  __extends(ErrorEvent, _super);\n  /**\n   * @param {Error} error error object.\n   */\n  function ErrorEvent(error) {\n    var _this = _super.call(this, _EventType.default.ERROR) || this;\n    /**\n     * @type {Error}\n     */\n    _this.error = error;\n    return _this;\n  }\n  return ErrorEvent;\n}(_Event.default);\n/**\n * @typedef {Object} StyleObject\n * @property {Object<string, SourceObject>} sources The style sources.\n * @property {string} sprite The sprite URL.\n * @property {string} glyphs The glyphs URL.\n * @property {Array<LayerObject>} layers The style layers.\n */\n/**\n * @typedef {Object} SourceObject\n * @property {string} url The source URL.\n * @property {SourceType} type The source type.\n */\n/**\n * The Mapbox source type.\n * @enum {string}\n */\nvar SourceType = {\n  VECTOR: 'vector'\n};\n/**\n * @typedef {Object} LayerObject\n * @property {string} id The layer id.\n * @property {string} source The source id.\n */\n/**\n * @typedef {Object} Options\n * @property {string} styleUrl The URL of the Mapbox style object to use for this layer.  For a\n * style created with Mapbox Studio and hosted on Mapbox, this will look like\n * 'mapbox://styles/you/your-style'.\n * @property {string} accessToken The access token for your Mapbox style.\n * @property {string} [source] If your style uses more than one source, you need to use either the\n * `source` property or the `layers` property to limit rendering to a single vector source.  The\n * `source` property corresponds to the id of a vector source in your Mapbox style.\n * @property {Array<string>} [layers] Limit rendering to the list of included layers.  All layers\n * must share the same vector soource.  If your style uses more than one source, you need to use\n * either the `source` property or the `layers` property to limit rendering to a single vector\n * source.\n * @property {boolean} [declutter=true] Declutter images and text. Decluttering is applied to all\n * image and text styles of all Vector and VectorTile layers that have set this to `true`. The priority\n * is defined by the z-index of the layer, the `zIndex` of the style and the render order of features.\n * Higher z-index means higher priority. Within the same z-index, a feature rendered before another has\n * higher priority.\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {import(\"../render.js\").OrderFunction} [renderOrder] Render order. Function to be used when sorting\n * features before rendering. By default features are drawn in the order that they are created. Use\n * `null` to avoid the sort, but get an undefined draw order.\n * @property {number} [renderBuffer=100] The buffer in pixels around the tile extent used by the\n * renderer when getting features from the vector tile for the rendering or hit-detection.\n * Recommended value: Vector tiles are usually generated with a buffer, so this value should match\n * the largest possible buffer of the used tiles. It should be at least the size of the largest\n * point symbol or line width.\n * @property {import(\"./VectorTileRenderType.js\").default|string} [renderMode='hybrid'] Render mode for vector tiles:\n *  * `'image'`: Vector tiles are rendered as images. Great performance, but point symbols and texts\n *    are always rotated with the view and pixels are scaled during zoom animations. When `declutter`\n *    is set to `true`, the decluttering is done per tile resulting in labels and point symbols getting\n *    cut off at tile boundaries.\n *  * `'hybrid'`: Polygon and line elements are rendered as images, so pixels are scaled during zoom\n *    animations. Point symbols and texts are accurately rendered as vectors and can stay upright on\n *    rotated views.\n *  * `'vector'`: Everything is rendered as vectors. Use this mode for improved performance on vector\n *    tile layers with only a few rendered features (e.g. for highlighting a subset of features of\n *    another layer with the same source).\n * @property {import(\"../PluggableMap.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link module:ol/Map#addLayer}.\n * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will be\n * recreated during animations. This means that no vectors will be shown clipped, but the setting\n * will have a performance impact for large amounts of vector data. When set to `false`, batches\n * will be recreated when no animation is active.\n * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will be\n * recreated during interactions. See also `updateWhileAnimating`.\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\n * means no preloading.\n * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.\n */\n/**\n * @classdesc\n * A vector tile layer based on a Mapbox style that uses a single vector source.  Configure\n * the layer with the `styleUrl` and `accessToken` shown in Mapbox Studio's share panel.\n * If the style uses more than one source, use the `source` property to choose a single\n * vector source.  If you want to render a subset of the layers in the style, use the `layers`\n * property (all layers must share the same vector source).  See the constructor options for\n * more detail.\n *\n *     var map = new Map({\n *       view: new View({\n *         center: [0, 0],\n *         zoom: 1\n *       }),\n *       layers: [\n *         new MapboxVector({\n *           styleUrl: 'mapbox://styles/mapbox/bright-v9',\n *           accessToken: 'your-mapbox-access-token-here'\n *         })\n *       ],\n *       target: 'map'\n *     });\n *\n * On configuration or loading error, the layer will trigger an `'error'` event.  Listeners\n * will receive an object with an `error` property that can be used to diagnose the problem.\n *\n * @param {Options} options Options.\n * @extends {VectorTileLayer}\n * @fires module:ol/events/Event~BaseEvent#event:error\n * @api\n */\nvar MapboxVectorLayer = /** @class */function (_super) {\n  __extends(MapboxVectorLayer, _super);\n  /**\n   * @param {Options} options Layer options.  At a minimum, `styleUrl` and `accessToken`\n   * must be provided.\n   */\n  function MapboxVectorLayer(options) {\n    var _this = this;\n    var declutter = 'declutter' in options ? options.declutter : true;\n    var source = new _VectorTile2.default({\n      state: _State.default.LOADING,\n      format: new _MVT.default()\n    });\n    _this = _super.call(this, {\n      source: source,\n      declutter: declutter,\n      className: options.className,\n      opacity: options.opacity,\n      visible: options.visible,\n      zIndex: options.zIndex,\n      minResolution: options.minResolution,\n      maxResolution: options.maxResolution,\n      minZoom: options.minZoom,\n      maxZoom: options.maxZoom,\n      renderOrder: options.renderOrder,\n      renderBuffer: options.renderBuffer,\n      renderMode: options.renderMode,\n      map: options.map,\n      updateWhileAnimating: options.updateWhileAnimating,\n      updateWhileInteracting: options.updateWhileInteracting,\n      preload: options.preload,\n      useInterimTilesOnError: options.useInterimTilesOnError\n    }) || this;\n    _this.sourceId = options.source;\n    _this.layers = options.layers;\n    _this.accessToken = options.accessToken;\n    _this.fetchStyle(options.styleUrl);\n    return _this;\n  }\n  /**\n   * Fetch the style object.\n   * @param {string} styleUrl The URL of the style to load.\n   * @protected\n   */\n  MapboxVectorLayer.prototype.fetchStyle = function (styleUrl) {\n    var _this = this;\n    var url = normalizeStyleUrl(styleUrl, this.accessToken);\n    fetch(url).then(function (response) {\n      if (!response.ok) {\n        throw new Error(\"unexpected response when fetching style: \" + response.status);\n      }\n      return response.json();\n    }).then(function (style) {\n      _this.onStyleLoad(style);\n    }).catch(function (error) {\n      _this.handleError(error);\n    });\n  };\n  /**\n   * Handle the loaded style object.\n   * @param {StyleObject} style The loaded style.\n   * @protected\n   */\n  MapboxVectorLayer.prototype.onStyleLoad = function (style) {\n    var _this = this;\n    var sourceId;\n    var sourceIdOrLayersList;\n    if (this.layers) {\n      // confirm all layers share the same source\n      var lookup = {};\n      for (var i = 0; i < style.layers.length; ++i) {\n        var layer = style.layers[i];\n        if (layer.source) {\n          lookup[layer.id] = layer.source;\n        }\n      }\n      var firstSource = void 0;\n      for (var i = 0; i < this.layers.length; ++i) {\n        var candidate = lookup[this.layers[i]];\n        if (!candidate) {\n          this.handleError(new Error(\"could not find source for \" + this.layers[i]));\n          return;\n        }\n        if (!firstSource) {\n          firstSource = candidate;\n        } else if (firstSource !== candidate) {\n          this.handleError(new Error(\"layers can only use a single source, found \" + firstSource + \" and \" + candidate));\n          return;\n        }\n      }\n      sourceId = firstSource;\n      sourceIdOrLayersList = this.layers;\n    } else {\n      sourceId = this.sourceId;\n      sourceIdOrLayersList = sourceId;\n    }\n    if (!sourceIdOrLayersList) {\n      // default to the first source in the style\n      sourceId = Object.keys(style.sources)[0];\n      sourceIdOrLayersList = sourceId;\n    }\n    if (style.sprite) {\n      style.sprite = normalizeSpriteUrl(style.sprite, this.accessToken);\n    }\n    if (style.glyphs) {\n      style.glyphs = normalizeGlyphsUrl(style.glyphs, this.accessToken);\n    }\n    var styleSource = style.sources[sourceId];\n    if (styleSource.type !== SourceType.VECTOR) {\n      this.handleError(new Error(\"only works for vector sources, found \" + styleSource.type));\n      return;\n    }\n    var source = this.getSource();\n    source.setUrl(normalizeSourceUrl(styleSource.url, this.accessToken));\n    (0, _olMapboxStyle.applyStyle)(this, style, sourceIdOrLayersList).then(function () {\n      source.setState(_State.default.READY);\n    }).catch(function (error) {\n      _this.handleError(error);\n    });\n  };\n  /**\n   * Handle configuration or loading error.\n   * @param {Error} error The error.\n   * @protected\n   */\n  MapboxVectorLayer.prototype.handleError = function (error) {\n    this.dispatchEvent(new ErrorEvent(error));\n    var source = this.getSource();\n    source.setState(_State.default.ERROR);\n  };\n  return MapboxVectorLayer;\n}(_VectorTile.default);\nvar _default = exports.default = MapboxVectorLayer;"},"sourceMaps":null,"error":null,"hash":"751b38c5f912fb09c5c78f36102cc1dc","cacheData":{"env":{}}}