{"id":"dQMP","dependencies":[{"name":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\package.json","includedInParent":true,"mtime":1750141916701},{"name":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\package.json","includedInParent":true,"mtime":1749531474589},{"name":"../Tile.js","loc":{"line":17,"column":17,"index":642},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\source\\TileDebug.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\Tile.js"},{"name":"../TileState.js","loc":{"line":18,"column":22,"index":678},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\source\\TileDebug.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\TileState.js"},{"name":"./XYZ.js","loc":{"line":19,"column":16,"index":713},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\source\\TileDebug.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\source\\XYZ.js"},{"name":"../dom.js","loc":{"line":20,"column":38,"index":763},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\source\\TileDebug.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\dom.js"},{"name":"../tilecoord.js","loc":{"line":21,"column":26,"index":802},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\source\\TileDebug.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\tilecoord.js"},{"name":"../size.js","loc":{"line":22,"column":23,"index":844},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\source\\TileDebug.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\size.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _Tile = _interopRequireDefault(require(\"../Tile.js\"));\nvar _TileState = _interopRequireDefault(require(\"../TileState.js\"));\nvar _XYZ = _interopRequireDefault(require(\"./XYZ.js\"));\nvar _dom = require(\"../dom.js\");\nvar _tilecoord = require(\"../tilecoord.js\");\nvar _size = require(\"../size.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n/**\n * @module ol/source/TileDebug\n */\nvar __extends = void 0 && (void 0).__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar LabeledTile = /** @class */function (_super) {\n  __extends(LabeledTile, _super);\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\n   * @param {string} text Text.\n   */\n  function LabeledTile(tileCoord, tileSize, text) {\n    var _this = _super.call(this, tileCoord, _TileState.default.LOADED) || this;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    _this.tileSize_ = tileSize;\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.text_ = text;\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    _this.canvas_ = null;\n    return _this;\n  }\n  /**\n   * Get the image element for this tile.\n   * @return {HTMLCanvasElement} Image.\n   */\n  LabeledTile.prototype.getImage = function () {\n    if (this.canvas_) {\n      return this.canvas_;\n    } else {\n      var tileSize = this.tileSize_;\n      var context = (0, _dom.createCanvasContext2D)(tileSize[0], tileSize[1]);\n      context.strokeStyle = 'grey';\n      context.strokeRect(0.5, 0.5, tileSize[0] + 0.5, tileSize[1] + 0.5);\n      context.fillStyle = 'grey';\n      context.strokeStyle = 'white';\n      context.textAlign = 'center';\n      context.textBaseline = 'middle';\n      context.font = '24px sans-serif';\n      context.lineWidth = 4;\n      context.strokeText(this.text_, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);\n      context.fillText(this.text_, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);\n      this.canvas_ = context.canvas;\n      return context.canvas;\n    }\n  };\n  LabeledTile.prototype.load = function () {};\n  return LabeledTile;\n}(_Tile.default);\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Optional projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [zDirection=0] Set to `1` when debugging `VectorTile` sources with\n * a default configuration. Indicates which resolution should be used by a renderer if\n * the view resolution does not match any resolution of the tile source. If 0, the nearest\n * resolution will be used. If 1, the nearest lower resolution will be used. If -1, the\n * nearest higher resolution will be used.\n */\n/**\n * @classdesc\n * A pseudo tile source, which does not fetch tiles from a server, but renders\n * a grid outline for the tile grid/projection along with the coordinates for\n * each tile. See examples/canvas-tiles for an example.\n *\n * Uses Canvas context2d, so requires Canvas support.\n * @api\n */\nvar TileDebug = /** @class */function (_super) {\n  __extends(TileDebug, _super);\n  /**\n   * @param {Options=} opt_options Debug tile options.\n   */\n  function TileDebug(opt_options) {\n    var _this = this;\n    /**\n     * @type {Options}\n     */\n    var options = opt_options || {};\n    _this = _super.call(this, {\n      opaque: false,\n      projection: options.projection,\n      tileGrid: options.tileGrid,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      zDirection: options.zDirection\n    }) || this;\n    return _this;\n  }\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @return {!LabeledTile} Tile.\n   */\n  TileDebug.prototype.getTile = function (z, x, y) {\n    var tileCoordKey = (0, _tilecoord.getKeyZXY)(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      return /** @type {!LabeledTile} */this.tileCache.get(tileCoordKey);\n    } else {\n      var tileSize = (0, _size.toSize)(this.tileGrid.getTileSize(z));\n      var tileCoord = [z, x, y];\n      var textTileCoord = this.getTileCoordForTileUrlFunction(tileCoord);\n      var text = void 0;\n      if (textTileCoord) {\n        text = 'z:' + textTileCoord[0] + ' x:' + textTileCoord[1] + ' y:' + textTileCoord[2];\n      } else {\n        text = 'none';\n      }\n      var tile = new LabeledTile(tileCoord, tileSize, text);\n      this.tileCache.set(tileCoordKey, tile);\n      return tile;\n    }\n  };\n  return TileDebug;\n}(_XYZ.default);\nvar _default = exports.default = TileDebug;"},"sourceMaps":null,"error":null,"hash":"56c6ae4e32a9e459f60d314e74c56024","cacheData":{"env":{}}}