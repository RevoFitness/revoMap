{"id":"K7j2","dependencies":[{"name":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\package.json","includedInParent":true,"mtime":1750141916701},{"name":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\package.json","includedInParent":true,"mtime":1749531474589},{"name":"./ImageBase.js","loc":{"line":17,"column":22,"index":642},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\ImageCanvas.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\ImageBase.js"},{"name":"./ImageState.js","loc":{"line":18,"column":23,"index":683},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\ImageCanvas.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\ImageState.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _ImageBase = _interopRequireDefault(require(\"./ImageBase.js\"));\nvar _ImageState = _interopRequireDefault(require(\"./ImageState.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar __extends = void 0 && (void 0).__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/ImageCanvas\n */\n\n/**\n * A function that is called to trigger asynchronous canvas drawing.  It is\n * called with a \"done\" callback that should be called when drawing is done.\n * If any error occurs during drawing, the \"done\" callback should be called with\n * that error.\n *\n * @typedef {function(function(Error=): void): void} Loader\n */\nvar ImageCanvas = /** @class */function (_super) {\n  __extends(ImageCanvas, _super);\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {HTMLCanvasElement} canvas Canvas.\n   * @param {Loader=} opt_loader Optional loader function to\n   *     support asynchronous canvas drawing.\n   */\n  function ImageCanvas(extent, resolution, pixelRatio, canvas, opt_loader) {\n    var _this = this;\n    var state = opt_loader !== undefined ? _ImageState.default.IDLE : _ImageState.default.LOADED;\n    _this = _super.call(this, extent, resolution, pixelRatio, state) || this;\n    /**\n     * Optional canvas loader function.\n     * @type {?Loader}\n     * @private\n     */\n    _this.loader_ = opt_loader !== undefined ? opt_loader : null;\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    _this.canvas_ = canvas;\n    /**\n     * @private\n     * @type {?Error}\n     */\n    _this.error_ = null;\n    return _this;\n  }\n  /**\n   * Get any error associated with asynchronous rendering.\n   * @return {?Error} Any error that occurred during rendering.\n   */\n  ImageCanvas.prototype.getError = function () {\n    return this.error_;\n  };\n  /**\n   * Handle async drawing complete.\n   * @param {Error=} err Any error during drawing.\n   * @private\n   */\n  ImageCanvas.prototype.handleLoad_ = function (err) {\n    if (err) {\n      this.error_ = err;\n      this.state = _ImageState.default.ERROR;\n    } else {\n      this.state = _ImageState.default.LOADED;\n    }\n    this.changed();\n  };\n  /**\n   * Load not yet loaded URI.\n   */\n  ImageCanvas.prototype.load = function () {\n    if (this.state == _ImageState.default.IDLE) {\n      this.state = _ImageState.default.LOADING;\n      this.changed();\n      this.loader_(this.handleLoad_.bind(this));\n    }\n  };\n  /**\n   * @return {HTMLCanvasElement} Canvas element.\n   */\n  ImageCanvas.prototype.getImage = function () {\n    return this.canvas_;\n  };\n  return ImageCanvas;\n}(_ImageBase.default);\nvar _default = exports.default = ImageCanvas;"},"sourceMaps":null,"error":null,"hash":"b5f2a501236b7f1ff42dc6df050122f6","cacheData":{"env":{}}}