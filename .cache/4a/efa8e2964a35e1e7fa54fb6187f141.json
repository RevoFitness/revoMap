{"id":"MrCe","dependencies":[{"name":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\package.json","includedInParent":true,"mtime":1750141916701},{"name":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\package.json","includedInParent":true,"mtime":1749531474589},{"name":"./Immediate.js","loc":{"line":4,"column":36,"index":81},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\render\\canvas\\hitdetect.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\render\\canvas\\Immediate.js"},{"name":"../../geom/GeometryType.js","loc":{"line":5,"column":25,"index":124},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\render\\canvas\\hitdetect.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\geom\\GeometryType.js"},{"name":"../../style/IconAnchorUnits.js","loc":{"line":6,"column":28,"index":182},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\render\\canvas\\hitdetect.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\style\\IconAnchorUnits.js"},{"name":"../../style.js","loc":{"line":7,"column":21,"index":237},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\render\\canvas\\hitdetect.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\style.js"},{"name":"../../dom.js","loc":{"line":8,"column":38,"index":293},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\render\\canvas\\hitdetect.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\dom.js"},{"name":"../../extent.js","loc":{"line":9,"column":27,"index":336},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\render\\canvas\\hitdetect.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\extent.js"},{"name":"../../array.js","loc":{"line":10,"column":42,"index":397},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\render\\canvas\\hitdetect.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\array.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createHitDetectionImageData = createHitDetectionImageData;\nexports.hitDetect = hitDetect;\nvar _Immediate = _interopRequireDefault(require(\"./Immediate.js\"));\nvar _GeometryType = _interopRequireDefault(require(\"../../geom/GeometryType.js\"));\nvar _IconAnchorUnits = _interopRequireDefault(require(\"../../style/IconAnchorUnits.js\"));\nvar _style = require(\"../../style.js\");\nvar _dom = require(\"../../dom.js\");\nvar _extent = require(\"../../extent.js\");\nvar _array = require(\"../../array.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n/**\n * @module ol/render/canvas/hitdetet\n */\n\n/**\n * @param {import(\"../../size.js\").Size} size Canvas size in css pixels.\n * @param {Array<import(\"../../transform.js\").Transform>} transforms Transforms\n * for rendering features to all worlds of the viewport, from coordinates to css\n * pixels.\n * @param {Array<import(\"../../Feature.js\").FeatureLike>} features\n * Features to consider for hit detection.\n * @param {import(\"../../style/Style.js\").StyleFunction|undefined} styleFunction\n * Layer style function.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {ImageData} Hit detection image data.\n */\nfunction createHitDetectionImageData(size, transforms, features, styleFunction, extent, resolution, rotation) {\n  var width = size[0] / 2;\n  var height = size[1] / 2;\n  var context = (0, _dom.createCanvasContext2D)(width, height);\n  context.imageSmoothingEnabled = false;\n  var canvas = context.canvas;\n  var renderer = new _Immediate.default(context, 0.5, extent, null, rotation);\n  var featureCount = features.length;\n  // Stretch hit detection index to use the whole available color range\n  var indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);\n  var featuresByZIndex = {};\n  for (var i = 1; i <= featureCount; ++i) {\n    var feature = features[i - 1];\n    var featureStyleFunction = feature.getStyleFunction() || styleFunction;\n    if (!styleFunction) {\n      continue;\n    }\n    var styles = featureStyleFunction(feature, resolution);\n    if (!styles) {\n      continue;\n    }\n    if (!Array.isArray(styles)) {\n      styles = [styles];\n    }\n    var index = i * indexFactor;\n    var color = '#' + ('000000' + index.toString(16)).slice(-6);\n    for (var j = 0, jj = styles.length; j < jj; ++j) {\n      var originalStyle = styles[j];\n      var style = originalStyle.clone();\n      var fill = style.getFill();\n      if (fill) {\n        fill.setColor(color);\n      }\n      var stroke = style.getStroke();\n      if (stroke) {\n        stroke.setColor(color);\n      }\n      style.setText(undefined);\n      var image = originalStyle.getImage();\n      if (image) {\n        var imgSize = image.getImageSize();\n        if (!imgSize) {\n          continue;\n        }\n        var canvas_1 = document.createElement('canvas');\n        canvas_1.width = imgSize[0];\n        canvas_1.height = imgSize[1];\n        var imgContext = canvas_1.getContext('2d', {\n          alpha: false\n        });\n        imgContext.fillStyle = color;\n        var img = imgContext.canvas;\n        imgContext.fillRect(0, 0, img.width, img.height);\n        var width_1 = imgSize ? imgSize[0] : img.width;\n        var height_1 = imgSize ? imgSize[1] : img.height;\n        var iconContext = (0, _dom.createCanvasContext2D)(width_1, height_1);\n        iconContext.drawImage(img, 0, 0);\n        style.setImage(new _style.Icon({\n          img: img,\n          imgSize: imgSize,\n          anchor: image.getAnchor(),\n          anchorXUnits: _IconAnchorUnits.default.PIXELS,\n          anchorYUnits: _IconAnchorUnits.default.PIXELS,\n          offset: image.getOrigin(),\n          size: image.getSize(),\n          opacity: image.getOpacity(),\n          scale: image.getScale(),\n          rotation: image.getRotation(),\n          rotateWithView: image.getRotateWithView()\n        }));\n      }\n      var zIndex = Number(style.getZIndex());\n      var byGeometryType = featuresByZIndex[zIndex];\n      if (!byGeometryType) {\n        byGeometryType = {};\n        featuresByZIndex[zIndex] = byGeometryType;\n        byGeometryType[_GeometryType.default.POLYGON] = [];\n        byGeometryType[_GeometryType.default.CIRCLE] = [];\n        byGeometryType[_GeometryType.default.LINE_STRING] = [];\n        byGeometryType[_GeometryType.default.POINT] = [];\n      }\n      var geometry = style.getGeometryFunction()(feature);\n      if (geometry && (0, _extent.intersects)(extent, geometry.getExtent())) {\n        byGeometryType[geometry.getType().replace('Multi', '')].push(geometry, style);\n      }\n    }\n  }\n  var zIndexKeys = Object.keys(featuresByZIndex).map(Number).sort(_array.numberSafeCompareFunction);\n  for (var i = 0, ii = zIndexKeys.length; i < ii; ++i) {\n    var byGeometryType = featuresByZIndex[zIndexKeys[i]];\n    for (var type in byGeometryType) {\n      var geomAndStyle = byGeometryType[type];\n      for (var j = 0, jj = geomAndStyle.length; j < jj; j += 2) {\n        renderer.setStyle(geomAndStyle[j + 1]);\n        for (var k = 0, kk = transforms.length; k < kk; ++k) {\n          renderer.setTransform(transforms[k]);\n          renderer.drawGeometry(geomAndStyle[j]);\n        }\n      }\n    }\n  }\n  return context.getImageData(0, 0, canvas.width, canvas.height);\n}\n/**\n * @param {import(\"../../pixel\").Pixel} pixel Pixel coordinate on the hit\n * detection canvas in css pixels.\n * @param {Array<import(\"../../Feature\").FeatureLike>} features Features. Has to\n * match the `features` array that was passed to `createHitDetectionImageData()`.\n * @param {ImageData} imageData Hit detection image data generated by\n * `createHitDetectionImageData()`.\n * @return {Array<import(\"../../Feature\").FeatureLike>} features Features.\n */\nfunction hitDetect(pixel, features, imageData) {\n  var resultFeatures = [];\n  if (imageData) {\n    var index = (Math.round(pixel[0] / 2) + Math.round(pixel[1] / 2) * imageData.width) * 4;\n    var r = imageData.data[index];\n    var g = imageData.data[index + 1];\n    var b = imageData.data[index + 2];\n    var i = b + 256 * (g + 256 * r);\n    var indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);\n    if (i && i % indexFactor === 0) {\n      resultFeatures.push(features[i / indexFactor - 1]);\n    }\n  }\n  return resultFeatures;\n}"},"sourceMaps":null,"error":null,"hash":"cb87f3cd28e0ce0c6feb6cb0925f5562","cacheData":{"env":{}}}