{"id":"qrxo","dependencies":[{"name":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\package.json","includedInParent":true,"mtime":1750141916701},{"name":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\package.json","includedInParent":true,"mtime":1749531474589},{"name":"../Collection.js","loc":{"line":17,"column":23,"index":650},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\interaction\\Modify.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\Collection.js"},{"name":"../CollectionEventType.js","loc":{"line":18,"column":32,"index":702},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\interaction\\Modify.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\CollectionEventType.js"},{"name":"../events/Event.js","loc":{"line":19,"column":18,"index":749},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\interaction\\Modify.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\events\\Event.js"},{"name":"../events/EventType.js","loc":{"line":20,"column":22,"index":793},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\interaction\\Modify.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\events\\EventType.js"},{"name":"../Feature.js","loc":{"line":21,"column":20,"index":839},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\interaction\\Modify.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\Feature.js"},{"name":"../geom/GeometryType.js","loc":{"line":22,"column":25,"index":881},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\interaction\\Modify.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\geom\\GeometryType.js"},{"name":"../MapBrowserEventType.js","loc":{"line":23,"column":32,"index":940},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\interaction\\Modify.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\MapBrowserEventType.js"},{"name":"../geom/Point.js","loc":{"line":24,"column":18,"index":987},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\interaction\\Modify.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\geom\\Point.js"},{"name":"./Pointer.js","loc":{"line":25,"column":31,"index":1038},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\interaction\\Modify.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\interaction\\Pointer.js"},{"name":"../structs/RBush.js","loc":{"line":26,"column":18,"index":1072},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\interaction\\Modify.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\structs\\RBush.js"},{"name":"../source/VectorEventType.js","loc":{"line":27,"column":28,"index":1123},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\interaction\\Modify.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\source\\VectorEventType.js"},{"name":"../layer/Vector.js","loc":{"line":28,"column":24,"index":1179},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\interaction\\Modify.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\layer\\Vector.js"},{"name":"../source/Vector.js","loc":{"line":29,"column":25,"index":1226},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\interaction\\Modify.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\source\\Vector.js"},{"name":"../events/condition.js","loc":{"line":30,"column":64,"index":1313},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\interaction\\Modify.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\events\\condition.js"},{"name":"../extent.js","loc":{"line":31,"column":102,"index":1441},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\interaction\\Modify.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\extent.js"},{"name":"../coordinate.js","loc":{"line":32,"column":166,"index":1623},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\interaction\\Modify.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\coordinate.js"},{"name":"../style/Style.js","loc":{"line":33,"column":35,"index":1678},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\interaction\\Modify.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\style\\Style.js"},{"name":"../array.js","loc":{"line":34,"column":23,"index":1722},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\interaction\\Modify.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\array.js"},{"name":"../geom/Polygon.js","loc":{"line":35,"column":27,"index":1764},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\interaction\\Modify.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\geom\\Polygon.js"},{"name":"../proj.js","loc":{"line":36,"column":103,"index":1889},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\interaction\\Modify.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\proj.js"},{"name":"../util.js","loc":{"line":37,"column":23,"index":1926},"parent":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\interaction\\Modify.js","resolved":"C:\\Users\\MathewBowyer\\Downloads\\open_layers_map-main\\node_modules\\ol\\util.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.ModifyEvent = void 0;\nvar _Collection = _interopRequireDefault(require(\"../Collection.js\"));\nvar _CollectionEventType = _interopRequireDefault(require(\"../CollectionEventType.js\"));\nvar _Event = _interopRequireDefault(require(\"../events/Event.js\"));\nvar _EventType = _interopRequireDefault(require(\"../events/EventType.js\"));\nvar _Feature = _interopRequireDefault(require(\"../Feature.js\"));\nvar _GeometryType = _interopRequireDefault(require(\"../geom/GeometryType.js\"));\nvar _MapBrowserEventType = _interopRequireDefault(require(\"../MapBrowserEventType.js\"));\nvar _Point = _interopRequireDefault(require(\"../geom/Point.js\"));\nvar _Pointer = _interopRequireDefault(require(\"./Pointer.js\"));\nvar _RBush = _interopRequireDefault(require(\"../structs/RBush.js\"));\nvar _VectorEventType = _interopRequireDefault(require(\"../source/VectorEventType.js\"));\nvar _Vector = _interopRequireDefault(require(\"../layer/Vector.js\"));\nvar _Vector2 = _interopRequireDefault(require(\"../source/Vector.js\"));\nvar _condition = require(\"../events/condition.js\");\nvar _extent = require(\"../extent.js\");\nvar _coordinate = require(\"../coordinate.js\");\nvar _Style = require(\"../style/Style.js\");\nvar _array = require(\"../array.js\");\nvar _Polygon = require(\"../geom/Polygon.js\");\nvar _proj = require(\"../proj.js\");\nvar _util = require(\"../util.js\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar __extends = void 0 && (void 0).__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/Modify\n */\n\n/**\n * The segment index assigned to a circle's center when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nvar CIRCLE_CENTER_INDEX = 0;\n/**\n * The segment index assigned to a circle's circumference when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nvar CIRCLE_CIRCUMFERENCE_INDEX = 1;\nvar tempExtent = [0, 0, 0, 0];\nvar tempSegment = [];\n/**\n * @enum {string}\n */\nvar ModifyEventType = {\n  /**\n   * Triggered upon feature modification start\n   * @event ModifyEvent#modifystart\n   * @api\n   */\n  MODIFYSTART: 'modifystart',\n  /**\n   * Triggered upon feature modification end\n   * @event ModifyEvent#modifyend\n   * @api\n   */\n  MODIFYEND: 'modifyend'\n};\n/**\n * @typedef {Object} SegmentData\n * @property {Array<number>} [depth]\n * @property {Feature} feature\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry\n * @property {number} [index]\n * @property {Array<import(\"../extent.js\").Extent>} segment\n * @property {Array<SegmentData>} [featureSegments]\n */\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event will be considered to add or move a\n * vertex to the sketch. Default is\n * {@link module:ol/events/condition~primaryAction}.\n * @property {import(\"../events/condition.js\").Condition} [deleteCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. By default,\n * {@link module:ol/events/condition~singleClick} with\n * {@link module:ol/events/condition~altKeyOnly} results in a vertex deletion.\n * @property {import(\"../events/condition.js\").Condition} [insertVertexCondition] A\n * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether a new vertex should be added to the sketch\n * features. Default is {@link module:ol/events/condition~always}.\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style used for the features being modified. By default the default edit\n * style is used (see {@link module:ol/style}).\n * @property {VectorSource} [source] The vector source with\n * features to modify.  If a vector source is not provided, a feature collection\n * must be provided with the features option.\n * @property {Collection<Feature>} [features]\n * The features the interaction works on.  If a feature collection is not\n * provided, a vector source must be provided with the source option.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n */\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are\n * instances of this type.\n */\nvar ModifyEvent = exports.ModifyEvent = /** @class */function (_super) {\n  __extends(ModifyEvent, _super);\n  /**\n   * @param {ModifyEventType} type Type.\n   * @param {Collection<Feature>} features\n   * The features modified.\n   * @param {import(\"../MapBrowserEvent.js\").default} MapBrowserEvent\n   * Associated {@link module:ol/MapBrowserEvent}.\n   */\n  function ModifyEvent(type, features, MapBrowserEvent) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The features being modified.\n     * @type {Collection<Feature>}\n     * @api\n     */\n    _this.features = features;\n    /**\n     * Associated {@link module:ol/MapBrowserEvent}.\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @api\n     */\n    _this.mapBrowserEvent = MapBrowserEvent;\n    return _this;\n  }\n  return ModifyEvent;\n}(_Event.default);\n/**\n * @classdesc\n * Interaction for modifying feature geometries.  To modify features that have\n * been added to an existing source, construct the modify interaction with the\n * `source` option.  If you want to modify features in a collection (for example,\n * the collection used by a select interaction), construct the interaction with\n * the `features` option.  The interaction must be constructed with either a\n * `source` or `features` option.\n *\n * By default, the interaction will allow deletion of vertices when the `alt`\n * key is pressed.  To configure the interaction with a different condition\n * for deletion, use the `deleteCondition` option.\n * @fires ModifyEvent\n * @api\n */\nvar Modify = /** @class */function (_super) {\n  __extends(Modify, _super);\n  /**\n   * @param {Options} options Options.\n   */\n  function Modify(options) {\n    var _this = _super.call(this, /** @type {import(\"./Pointer.js\").Options} */options) || this;\n    /** @private */\n    _this.boundHandleFeatureChange_ = _this.handleFeatureChange_.bind(_this);\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    _this.condition_ = options.condition ? options.condition : _condition.primaryAction;\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n    _this.defaultDeleteCondition_ = function (mapBrowserEvent) {\n      return (0, _condition.altKeyOnly)(mapBrowserEvent) && (0, _condition.singleClick)(mapBrowserEvent);\n    };\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    _this.deleteCondition_ = options.deleteCondition ? options.deleteCondition : _this.defaultDeleteCondition_;\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    _this.insertVertexCondition_ = options.insertVertexCondition ? options.insertVertexCondition : _condition.always;\n    /**\n     * Editing vertex.\n     * @type {Feature}\n     * @private\n     */\n    _this.vertexFeature_ = null;\n    /**\n     * Segments intersecting {@link this.vertexFeature_} by segment uid.\n     * @type {Object<string, boolean>}\n     * @private\n     */\n    _this.vertexSegments_ = null;\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    _this.lastPixel_ = [0, 0];\n    /**\n     * Tracks if the next `singleclick` event should be ignored to prevent\n     * accidental deletion right after vertex creation.\n     * @type {boolean}\n     * @private\n     */\n    _this.ignoreNextSingleClick_ = false;\n    /**\n     * @type {boolean}\n     * @private\n     */\n    _this.modified_ = false;\n    /**\n     * Segment RTree for each layer\n     * @type {RBush<SegmentData>}\n     * @private\n     */\n    _this.rBush_ = new _RBush.default();\n    /**\n     * @type {number}\n     * @private\n     */\n    _this.pixelTolerance_ = options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n    /**\n     * @type {boolean}\n     * @private\n     */\n    _this.snappedToVertex_ = false;\n    /**\n     * Indicate whether the interaction is currently changing a feature's\n     * coordinates.\n     * @type {boolean}\n     * @private\n     */\n    _this.changingFeature_ = false;\n    /**\n     * @type {Array}\n     * @private\n     */\n    _this.dragSegments_ = [];\n    /**\n     * Draw overlay where sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n    _this.overlay_ = new _Vector.default({\n      source: new _Vector2.default({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n    /**\n     * @const\n     * @private\n     * @type {!Object<string, function(Feature, import(\"../geom/Geometry.js\").default): void>}\n     */\n    _this.SEGMENT_WRITERS_ = {\n      'Point': _this.writePointGeometry_.bind(_this),\n      'LineString': _this.writeLineStringGeometry_.bind(_this),\n      'LinearRing': _this.writeLineStringGeometry_.bind(_this),\n      'Polygon': _this.writePolygonGeometry_.bind(_this),\n      'MultiPoint': _this.writeMultiPointGeometry_.bind(_this),\n      'MultiLineString': _this.writeMultiLineStringGeometry_.bind(_this),\n      'MultiPolygon': _this.writeMultiPolygonGeometry_.bind(_this),\n      'Circle': _this.writeCircleGeometry_.bind(_this),\n      'GeometryCollection': _this.writeGeometryCollectionGeometry_.bind(_this)\n    };\n    /**\n     * @type {VectorSource}\n     * @private\n     */\n    _this.source_ = null;\n    var features;\n    if (options.source) {\n      _this.source_ = options.source;\n      features = new _Collection.default(_this.source_.getFeatures());\n      _this.source_.addEventListener(_VectorEventType.default.ADDFEATURE, _this.handleSourceAdd_.bind(_this));\n      _this.source_.addEventListener(_VectorEventType.default.REMOVEFEATURE, _this.handleSourceRemove_.bind(_this));\n    } else {\n      features = options.features;\n    }\n    if (!features) {\n      throw new Error('The modify interaction requires features or a source');\n    }\n    /**\n     * @type {Collection<Feature>}\n     * @private\n     */\n    _this.features_ = features;\n    _this.features_.forEach(_this.addFeature_.bind(_this));\n    _this.features_.addEventListener(_CollectionEventType.default.ADD, _this.handleFeatureAdd_.bind(_this));\n    _this.features_.addEventListener(_CollectionEventType.default.REMOVE, _this.handleFeatureRemove_.bind(_this));\n    /**\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @private\n     */\n    _this.lastPointerEvent_ = null;\n    return _this;\n  }\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  Modify.prototype.addFeature_ = function (feature) {\n    var geometry = feature.getGeometry();\n    if (geometry) {\n      var writer = this.SEGMENT_WRITERS_[geometry.getType()];\n      if (writer) {\n        writer(feature, geometry);\n      }\n    }\n    var map = this.getMap();\n    if (map && map.isRendered() && this.getActive()) {\n      this.handlePointerAtPixel_(this.lastPixel_, map);\n    }\n    feature.addEventListener(_EventType.default.CHANGE, this.boundHandleFeatureChange_);\n  };\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Map browser event\n   * @private\n   */\n  Modify.prototype.willModifyFeatures_ = function (evt) {\n    if (!this.modified_) {\n      this.modified_ = true;\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYSTART, this.features_, evt));\n    }\n  };\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  Modify.prototype.removeFeature_ = function (feature) {\n    this.removeFeatureSegmentData_(feature);\n    // Remove the vertex feature if the collection of canditate features is empty.\n    if (this.vertexFeature_ && this.features_.getLength() === 0) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n    feature.removeEventListener(_EventType.default.CHANGE, this.boundHandleFeatureChange_);\n  };\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  Modify.prototype.removeFeatureSegmentData_ = function (feature) {\n    var rBush = this.rBush_;\n    /** @type {Array<SegmentData>} */\n    var nodesToRemove = [];\n    rBush.forEach(\n    /**\n     * @param {SegmentData} node RTree node.\n     */\n    function (node) {\n      if (feature === node.feature) {\n        nodesToRemove.push(node);\n      }\n    });\n    for (var i = nodesToRemove.length - 1; i >= 0; --i) {\n      var nodeToRemove = nodesToRemove[i];\n      for (var j = this.dragSegments_.length - 1; j >= 0; --j) {\n        if (this.dragSegments_[j][0] === nodeToRemove) {\n          this.dragSegments_.splice(j, 1);\n        }\n      }\n      rBush.remove(nodeToRemove);\n    }\n  };\n  /**\n   * Activate or deactivate the interaction.\n   * @param {boolean} active Active.\n   * @observable\n   * @api\n   */\n  Modify.prototype.setActive = function (active) {\n    if (this.vertexFeature_ && !active) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n    _super.prototype.setActive.call(this, active);\n  };\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   */\n  Modify.prototype.setMap = function (map) {\n    this.overlay_.setMap(map);\n    _super.prototype.setMap.call(this, map);\n  };\n  /**\n   * Get the overlay layer that this interaction renders sketch features to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n  Modify.prototype.getOverlay = function () {\n    return this.overlay_;\n  };\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  Modify.prototype.handleSourceAdd_ = function (event) {\n    if (event.feature) {\n      this.features_.push(event.feature);\n    }\n  };\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  Modify.prototype.handleSourceRemove_ = function (event) {\n    if (event.feature) {\n      this.features_.remove(event.feature);\n    }\n  };\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n  Modify.prototype.handleFeatureAdd_ = function (evt) {\n    this.addFeature_(/** @type {Feature} */evt.element);\n  };\n  /**\n   * @param {import(\"../events/Event.js\").default} evt Event.\n   * @private\n   */\n  Modify.prototype.handleFeatureChange_ = function (evt) {\n    if (!this.changingFeature_) {\n      var feature = /** @type {Feature} */evt.target;\n      this.removeFeature_(feature);\n      this.addFeature_(feature);\n    }\n  };\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n  Modify.prototype.handleFeatureRemove_ = function (evt) {\n    var feature = /** @type {Feature} */evt.element;\n    this.removeFeature_(feature);\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {Point} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writePointGeometry_ = function (feature, geometry) {\n    var coordinates = geometry.getCoordinates();\n    /** @type {SegmentData} */\n    var segmentData = {\n      feature: feature,\n      geometry: geometry,\n      segment: [coordinates, coordinates]\n    };\n    this.rBush_.insert(geometry.getExtent(), segmentData);\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeMultiPointGeometry_ = function (feature, geometry) {\n    var points = geometry.getCoordinates();\n    for (var i = 0, ii = points.length; i < ii; ++i) {\n      var coordinates = points[i];\n      /** @type {SegmentData} */\n      var segmentData = {\n        feature: feature,\n        geometry: geometry,\n        depth: [i],\n        index: i,\n        segment: [coordinates, coordinates]\n      };\n      this.rBush_.insert(geometry.getExtent(), segmentData);\n    }\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeLineStringGeometry_ = function (feature, geometry) {\n    var coordinates = geometry.getCoordinates();\n    for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n      var segment = coordinates.slice(i, i + 2);\n      /** @type {SegmentData} */\n      var segmentData = {\n        feature: feature,\n        geometry: geometry,\n        index: i,\n        segment: segment\n      };\n      this.rBush_.insert((0, _extent.boundingExtent)(segment), segmentData);\n    }\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeMultiLineStringGeometry_ = function (feature, geometry) {\n    var lines = geometry.getCoordinates();\n    for (var j = 0, jj = lines.length; j < jj; ++j) {\n      var coordinates = lines[j];\n      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        var segment = coordinates.slice(i, i + 2);\n        /** @type {SegmentData} */\n        var segmentData = {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        };\n        this.rBush_.insert((0, _extent.boundingExtent)(segment), segmentData);\n      }\n    }\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writePolygonGeometry_ = function (feature, geometry) {\n    var rings = geometry.getCoordinates();\n    for (var j = 0, jj = rings.length; j < jj; ++j) {\n      var coordinates = rings[j];\n      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        var segment = coordinates.slice(i, i + 2);\n        /** @type {SegmentData} */\n        var segmentData = {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        };\n        this.rBush_.insert((0, _extent.boundingExtent)(segment), segmentData);\n      }\n    }\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeMultiPolygonGeometry_ = function (feature, geometry) {\n    var polygons = geometry.getCoordinates();\n    for (var k = 0, kk = polygons.length; k < kk; ++k) {\n      var rings = polygons[k];\n      for (var j = 0, jj = rings.length; j < jj; ++j) {\n        var coordinates = rings[j];\n        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n          var segment = coordinates.slice(i, i + 2);\n          /** @type {SegmentData} */\n          var segmentData = {\n            feature: feature,\n            geometry: geometry,\n            depth: [j, k],\n            index: i,\n            segment: segment\n          };\n          this.rBush_.insert((0, _extent.boundingExtent)(segment), segmentData);\n        }\n      }\n    }\n  };\n  /**\n   * We convert a circle into two segments.  The segment at index\n   * {@link CIRCLE_CENTER_INDEX} is the\n   * circle's center (a point).  The segment at index\n   * {@link CIRCLE_CIRCUMFERENCE_INDEX} is\n   * the circumference, and is not a line segment.\n   *\n   * @param {Feature} feature Feature.\n   * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeCircleGeometry_ = function (feature, geometry) {\n    var coordinates = geometry.getCenter();\n    /** @type {SegmentData} */\n    var centerSegmentData = {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CENTER_INDEX,\n      segment: [coordinates, coordinates]\n    };\n    /** @type {SegmentData} */\n    var circumferenceSegmentData = {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CIRCUMFERENCE_INDEX,\n      segment: [coordinates, coordinates]\n    };\n    var featureSegments = [centerSegmentData, circumferenceSegmentData];\n    centerSegmentData.featureSegments = featureSegments;\n    circumferenceSegmentData.featureSegments = featureSegments;\n    this.rBush_.insert((0, _extent.createOrUpdateFromCoordinate)(coordinates), centerSegmentData);\n    var circleGeometry = /** @type {import(\"../geom/Geometry.js\").default} */geometry;\n    var userProjection = (0, _proj.getUserProjection)();\n    if (userProjection && this.getMap()) {\n      var projection = this.getMap().getView().getProjection();\n      circleGeometry = circleGeometry.clone().transform(userProjection, projection);\n      circleGeometry = (0, _Polygon.fromCircle)(/** @type {import(\"../geom/Circle.js\").default} */circleGeometry).transform(projection, userProjection);\n    }\n    this.rBush_.insert(circleGeometry.getExtent(), circumferenceSegmentData);\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeGeometryCollectionGeometry_ = function (feature, geometry) {\n    var geometries = geometry.getGeometriesArray();\n    for (var i = 0; i < geometries.length; ++i) {\n      var geometry_1 = geometries[i];\n      var writer = this.SEGMENT_WRITERS_[geometry_1.getType()];\n      writer(feature, geometry_1);\n    }\n  };\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @return {Feature} Vertex feature.\n   * @private\n   */\n  Modify.prototype.createOrUpdateVertexFeature_ = function (coordinates) {\n    var vertexFeature = this.vertexFeature_;\n    if (!vertexFeature) {\n      vertexFeature = new _Feature.default(new _Point.default(coordinates));\n      this.vertexFeature_ = vertexFeature;\n      this.overlay_.getSource().addFeature(vertexFeature);\n    } else {\n      var geometry = vertexFeature.getGeometry();\n      geometry.setCoordinates(coordinates);\n    }\n    return vertexFeature;\n  };\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} and may modify the geometry.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   */\n  Modify.prototype.handleEvent = function (mapBrowserEvent) {\n    if (!mapBrowserEvent.originalEvent) {\n      return true;\n    }\n    this.lastPointerEvent_ = mapBrowserEvent;\n    var handled;\n    if (!mapBrowserEvent.map.getView().getInteracting() && mapBrowserEvent.type == _MapBrowserEventType.default.POINTERMOVE && !this.handlingDownUpSequence) {\n      this.handlePointerMove_(mapBrowserEvent);\n    }\n    if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {\n      if (mapBrowserEvent.type != _MapBrowserEventType.default.SINGLECLICK || !this.ignoreNextSingleClick_) {\n        handled = this.removePoint();\n      } else {\n        handled = true;\n      }\n    }\n    if (mapBrowserEvent.type == _MapBrowserEventType.default.SINGLECLICK) {\n      this.ignoreNextSingleClick_ = false;\n    }\n    return _super.prototype.handleEvent.call(this, mapBrowserEvent) && !handled;\n  };\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   */\n  Modify.prototype.handleDragEvent = function (evt) {\n    this.ignoreNextSingleClick_ = false;\n    this.willModifyFeatures_(evt);\n    var vertex = evt.coordinate;\n    for (var i = 0, ii = this.dragSegments_.length; i < ii; ++i) {\n      var dragSegment = this.dragSegments_[i];\n      var segmentData = dragSegment[0];\n      var depth = segmentData.depth;\n      var geometry = segmentData.geometry;\n      var coordinates = void 0;\n      var segment = segmentData.segment;\n      var index = dragSegment[1];\n      while (vertex.length < geometry.getStride()) {\n        vertex.push(segment[index][vertex.length]);\n      }\n      switch (geometry.getType()) {\n        case _GeometryType.default.POINT:\n          coordinates = vertex;\n          segment[0] = vertex;\n          segment[1] = vertex;\n          break;\n        case _GeometryType.default.MULTI_POINT:\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index] = vertex;\n          segment[0] = vertex;\n          segment[1] = vertex;\n          break;\n        case _GeometryType.default.LINE_STRING:\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case _GeometryType.default.MULTI_LINE_STRING:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case _GeometryType.default.POLYGON:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case _GeometryType.default.MULTI_POLYGON:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case _GeometryType.default.CIRCLE:\n          segment[0] = vertex;\n          segment[1] = vertex;\n          if (segmentData.index === CIRCLE_CENTER_INDEX) {\n            this.changingFeature_ = true;\n            geometry.setCenter(vertex);\n            this.changingFeature_ = false;\n          } else {\n            // We're dragging the circle's circumference:\n            this.changingFeature_ = true;\n            var projection = evt.map.getView().getProjection();\n            var radius = (0, _coordinate.distance)((0, _proj.fromUserCoordinate)(geometry.getCenter(), projection), (0, _proj.fromUserCoordinate)(vertex, projection));\n            var userProjection = (0, _proj.getUserProjection)();\n            if (userProjection) {\n              var circleGeometry = geometry.clone().transform(userProjection, projection);\n              circleGeometry.setRadius(radius);\n              radius = circleGeometry.transform(projection, userProjection).getRadius();\n            }\n            geometry.setRadius(radius);\n            this.changingFeature_ = false;\n          }\n          break;\n        default:\n        // pass\n      }\n      if (coordinates) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n      }\n    }\n    this.createOrUpdateVertexFeature_(vertex);\n  };\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @return {boolean} If the event was consumed.\n   */\n  Modify.prototype.handleDownEvent = function (evt) {\n    if (!this.condition_(evt)) {\n      return false;\n    }\n    var pixelCoordinate = evt.coordinate;\n    this.handlePointerAtPixel_(evt.pixel, evt.map, pixelCoordinate);\n    this.dragSegments_.length = 0;\n    this.modified_ = false;\n    var vertexFeature = this.vertexFeature_;\n    if (vertexFeature) {\n      var projection = evt.map.getView().getProjection();\n      var insertVertices = [];\n      var vertex = vertexFeature.getGeometry().getCoordinates();\n      var vertexExtent = (0, _extent.boundingExtent)([vertex]);\n      var segmentDataMatches = this.rBush_.getInExtent(vertexExtent);\n      var componentSegments = {};\n      segmentDataMatches.sort(compareIndexes);\n      for (var i = 0, ii = segmentDataMatches.length; i < ii; ++i) {\n        var segmentDataMatch = segmentDataMatches[i];\n        var segment = segmentDataMatch.segment;\n        var uid = (0, _util.getUid)(segmentDataMatch.geometry);\n        var depth = segmentDataMatch.depth;\n        if (depth) {\n          uid += '-' + depth.join('-'); // separate feature components\n        }\n        if (!componentSegments[uid]) {\n          componentSegments[uid] = new Array(2);\n        }\n        if (segmentDataMatch.geometry.getType() === _GeometryType.default.CIRCLE && segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n          var closestVertex = closestOnSegmentData(pixelCoordinate, segmentDataMatch, projection);\n          if ((0, _coordinate.equals)(closestVertex, vertex) && !componentSegments[uid][0]) {\n            this.dragSegments_.push([segmentDataMatch, 0]);\n            componentSegments[uid][0] = segmentDataMatch;\n          }\n          continue;\n        }\n        if ((0, _coordinate.equals)(segment[0], vertex) && !componentSegments[uid][0]) {\n          this.dragSegments_.push([segmentDataMatch, 0]);\n          componentSegments[uid][0] = segmentDataMatch;\n          continue;\n        }\n        if ((0, _coordinate.equals)(segment[1], vertex) && !componentSegments[uid][1]) {\n          // prevent dragging closed linestrings by the connecting node\n          if ((segmentDataMatch.geometry.getType() === _GeometryType.default.LINE_STRING || segmentDataMatch.geometry.getType() === _GeometryType.default.MULTI_LINE_STRING) && componentSegments[uid][0] && componentSegments[uid][0].index === 0) {\n            continue;\n          }\n          this.dragSegments_.push([segmentDataMatch, 1]);\n          componentSegments[uid][1] = segmentDataMatch;\n          continue;\n        }\n        if ((0, _util.getUid)(segment) in this.vertexSegments_ && !componentSegments[uid][0] && !componentSegments[uid][1] && this.insertVertexCondition_(evt)) {\n          insertVertices.push([segmentDataMatch, vertex]);\n        }\n      }\n      if (insertVertices.length) {\n        this.willModifyFeatures_(evt);\n      }\n      for (var j = insertVertices.length - 1; j >= 0; --j) {\n        this.insertVertex_.apply(this, insertVertices[j]);\n      }\n    }\n    return !!this.vertexFeature_;\n  };\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @return {boolean} If the event was consumed.\n   */\n  Modify.prototype.handleUpEvent = function (evt) {\n    for (var i = this.dragSegments_.length - 1; i >= 0; --i) {\n      var segmentData = this.dragSegments_[i][0];\n      var geometry = segmentData.geometry;\n      if (geometry.getType() === _GeometryType.default.CIRCLE) {\n        // Update a circle object in the R* bush:\n        var coordinates = geometry.getCenter();\n        var centerSegmentData = segmentData.featureSegments[0];\n        var circumferenceSegmentData = segmentData.featureSegments[1];\n        centerSegmentData.segment[0] = coordinates;\n        centerSegmentData.segment[1] = coordinates;\n        circumferenceSegmentData.segment[0] = coordinates;\n        circumferenceSegmentData.segment[1] = coordinates;\n        this.rBush_.update((0, _extent.createOrUpdateFromCoordinate)(coordinates), centerSegmentData);\n        var circleGeometry = geometry;\n        var userProjection = (0, _proj.getUserProjection)();\n        if (userProjection) {\n          var projection = evt.map.getView().getProjection();\n          circleGeometry = circleGeometry.clone().transform(userProjection, projection);\n          circleGeometry = (0, _Polygon.fromCircle)(circleGeometry).transform(projection, userProjection);\n        }\n        this.rBush_.update(circleGeometry.getExtent(), circumferenceSegmentData);\n      } else {\n        this.rBush_.update((0, _extent.boundingExtent)(segmentData.segment), segmentData);\n      }\n    }\n    if (this.modified_) {\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));\n      this.modified_ = false;\n    }\n    return false;\n  };\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @private\n   */\n  Modify.prototype.handlePointerMove_ = function (evt) {\n    this.lastPixel_ = evt.pixel;\n    this.handlePointerAtPixel_(evt.pixel, evt.map, evt.coordinate);\n  };\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @param {import(\"../coordinate.js\").Coordinate=} opt_coordinate The pixel Coordinate.\n   * @private\n   */\n  Modify.prototype.handlePointerAtPixel_ = function (pixel, map, opt_coordinate) {\n    var pixelCoordinate = opt_coordinate || map.getCoordinateFromPixel(pixel);\n    var projection = map.getView().getProjection();\n    var sortByDistance = function (a, b) {\n      return projectedDistanceToSegmentDataSquared(pixelCoordinate, a, projection) - projectedDistanceToSegmentDataSquared(pixelCoordinate, b, projection);\n    };\n    var viewExtent = (0, _proj.fromUserExtent)((0, _extent.createOrUpdateFromCoordinate)(pixelCoordinate, tempExtent), projection);\n    var buffer = map.getView().getResolution() * this.pixelTolerance_;\n    var box = (0, _proj.toUserExtent)((0, _extent.buffer)(viewExtent, buffer, tempExtent), projection);\n    var rBush = this.rBush_;\n    var nodes = rBush.getInExtent(box);\n    if (nodes.length > 0) {\n      nodes.sort(sortByDistance);\n      var node = nodes[0];\n      var closestSegment = node.segment;\n      var vertex = closestOnSegmentData(pixelCoordinate, node, projection);\n      var vertexPixel = map.getPixelFromCoordinate(vertex);\n      var dist = (0, _coordinate.distance)(pixel, vertexPixel);\n      if (dist <= this.pixelTolerance_) {\n        /** @type {Object<string, boolean>} */\n        var vertexSegments = {};\n        if (node.geometry.getType() === _GeometryType.default.CIRCLE && node.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n          this.snappedToVertex_ = true;\n          this.createOrUpdateVertexFeature_(vertex);\n        } else {\n          var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n          var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n          var squaredDist1 = (0, _coordinate.squaredDistance)(vertexPixel, pixel1);\n          var squaredDist2 = (0, _coordinate.squaredDistance)(vertexPixel, pixel2);\n          dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n          this.snappedToVertex_ = dist <= this.pixelTolerance_;\n          if (this.snappedToVertex_) {\n            vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\n          }\n          this.createOrUpdateVertexFeature_(vertex);\n          for (var i = 1, ii = nodes.length; i < ii; ++i) {\n            var segment = nodes[i].segment;\n            if ((0, _coordinate.equals)(closestSegment[0], segment[0]) && (0, _coordinate.equals)(closestSegment[1], segment[1]) || (0, _coordinate.equals)(closestSegment[0], segment[1]) && (0, _coordinate.equals)(closestSegment[1], segment[0])) {\n              vertexSegments[(0, _util.getUid)(segment)] = true;\n            } else {\n              break;\n            }\n          }\n        }\n        vertexSegments[(0, _util.getUid)(closestSegment)] = true;\n        this.vertexSegments_ = vertexSegments;\n        return;\n      }\n    }\n    if (this.vertexFeature_) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n  };\n  /**\n   * @param {SegmentData} segmentData Segment data.\n   * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\n   * @private\n   */\n  Modify.prototype.insertVertex_ = function (segmentData, vertex) {\n    var segment = segmentData.segment;\n    var feature = segmentData.feature;\n    var geometry = segmentData.geometry;\n    var depth = segmentData.depth;\n    var index = segmentData.index;\n    var coordinates;\n    while (vertex.length < geometry.getStride()) {\n      vertex.push(0);\n    }\n    switch (geometry.getType()) {\n      case _GeometryType.default.MULTI_LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case _GeometryType.default.POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case _GeometryType.default.MULTI_POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case _GeometryType.default.LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates.splice(index + 1, 0, vertex);\n        break;\n      default:\n        return;\n    }\n    this.setGeometryCoordinates_(geometry, coordinates);\n    var rTree = this.rBush_;\n    rTree.remove(segmentData);\n    this.updateSegmentIndices_(geometry, index, depth, 1);\n    /** @type {SegmentData} */\n    var newSegmentData = {\n      segment: [segment[0], vertex],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index\n    };\n    rTree.insert((0, _extent.boundingExtent)(newSegmentData.segment), newSegmentData);\n    this.dragSegments_.push([newSegmentData, 1]);\n    /** @type {SegmentData} */\n    var newSegmentData2 = {\n      segment: [vertex, segment[1]],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index + 1\n    };\n    rTree.insert((0, _extent.boundingExtent)(newSegmentData2.segment), newSegmentData2);\n    this.dragSegments_.push([newSegmentData2, 0]);\n    this.ignoreNextSingleClick_ = true;\n  };\n  /**\n   * Removes the vertex currently being pointed.\n   * @return {boolean} True when a vertex was removed.\n   * @api\n   */\n  Modify.prototype.removePoint = function () {\n    if (this.lastPointerEvent_ && this.lastPointerEvent_.type != _MapBrowserEventType.default.POINTERDRAG) {\n      var evt = this.lastPointerEvent_;\n      this.willModifyFeatures_(evt);\n      var removed = this.removeVertex_();\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));\n      this.modified_ = false;\n      return removed;\n    }\n    return false;\n  };\n  /**\n   * Removes a vertex from all matching features.\n   * @return {boolean} True when a vertex was removed.\n   * @private\n   */\n  Modify.prototype.removeVertex_ = function () {\n    var dragSegments = this.dragSegments_;\n    var segmentsByFeature = {};\n    var deleted = false;\n    var component, coordinates, dragSegment, geometry, i, index, left;\n    var newIndex, right, segmentData, uid;\n    for (i = dragSegments.length - 1; i >= 0; --i) {\n      dragSegment = dragSegments[i];\n      segmentData = dragSegment[0];\n      uid = (0, _util.getUid)(segmentData.feature);\n      if (segmentData.depth) {\n        // separate feature components\n        uid += '-' + segmentData.depth.join('-');\n      }\n      if (!(uid in segmentsByFeature)) {\n        segmentsByFeature[uid] = {};\n      }\n      if (dragSegment[1] === 0) {\n        segmentsByFeature[uid].right = segmentData;\n        segmentsByFeature[uid].index = segmentData.index;\n      } else if (dragSegment[1] == 1) {\n        segmentsByFeature[uid].left = segmentData;\n        segmentsByFeature[uid].index = segmentData.index + 1;\n      }\n    }\n    for (uid in segmentsByFeature) {\n      right = segmentsByFeature[uid].right;\n      left = segmentsByFeature[uid].left;\n      index = segmentsByFeature[uid].index;\n      newIndex = index - 1;\n      if (left !== undefined) {\n        segmentData = left;\n      } else {\n        segmentData = right;\n      }\n      if (newIndex < 0) {\n        newIndex = 0;\n      }\n      geometry = segmentData.geometry;\n      coordinates = geometry.getCoordinates();\n      component = coordinates;\n      deleted = false;\n      switch (geometry.getType()) {\n        case _GeometryType.default.MULTI_LINE_STRING:\n          if (coordinates[segmentData.depth[0]].length > 2) {\n            coordinates[segmentData.depth[0]].splice(index, 1);\n            deleted = true;\n          }\n          break;\n        case _GeometryType.default.LINE_STRING:\n          if (coordinates.length > 2) {\n            coordinates.splice(index, 1);\n            deleted = true;\n          }\n          break;\n        case _GeometryType.default.MULTI_POLYGON:\n          component = component[segmentData.depth[1]];\n        /* falls through */\n        case _GeometryType.default.POLYGON:\n          component = component[segmentData.depth[0]];\n          if (component.length > 4) {\n            if (index == component.length - 1) {\n              index = 0;\n            }\n            component.splice(index, 1);\n            deleted = true;\n            if (index === 0) {\n              // close the ring again\n              component.pop();\n              component.push(component[0]);\n              newIndex = component.length - 1;\n            }\n          }\n          break;\n        default:\n        // pass\n      }\n      if (deleted) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n        var segments = [];\n        if (left !== undefined) {\n          this.rBush_.remove(left);\n          segments.push(left.segment[0]);\n        }\n        if (right !== undefined) {\n          this.rBush_.remove(right);\n          segments.push(right.segment[1]);\n        }\n        if (left !== undefined && right !== undefined) {\n          /** @type {SegmentData} */\n          var newSegmentData = {\n            depth: segmentData.depth,\n            feature: segmentData.feature,\n            geometry: segmentData.geometry,\n            index: newIndex,\n            segment: segments\n          };\n          this.rBush_.insert((0, _extent.boundingExtent)(newSegmentData.segment), newSegmentData);\n        }\n        this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);\n        if (this.vertexFeature_) {\n          this.overlay_.getSource().removeFeature(this.vertexFeature_);\n          this.vertexFeature_ = null;\n        }\n        dragSegments.length = 0;\n      }\n    }\n    return deleted;\n  };\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {Array} coordinates Coordinates.\n   * @private\n   */\n  Modify.prototype.setGeometryCoordinates_ = function (geometry, coordinates) {\n    this.changingFeature_ = true;\n    geometry.setCoordinates(coordinates);\n    this.changingFeature_ = false;\n  };\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {number} index Index.\n   * @param {Array<number>|undefined} depth Depth.\n   * @param {number} delta Delta (1 or -1).\n   * @private\n   */\n  Modify.prototype.updateSegmentIndices_ = function (geometry, index, depth, delta) {\n    this.rBush_.forEachInExtent(geometry.getExtent(), function (segmentDataMatch) {\n      if (segmentDataMatch.geometry === geometry && (depth === undefined || segmentDataMatch.depth === undefined || (0, _array.equals)(segmentDataMatch.depth, depth)) && segmentDataMatch.index > index) {\n        segmentDataMatch.index += delta;\n      }\n    });\n  };\n  return Modify;\n}(_Pointer.default);\n/**\n * @param {SegmentData} a The first segment data.\n * @param {SegmentData} b The second segment data.\n * @return {number} The difference in indexes.\n */\nfunction compareIndexes(a, b) {\n  return a.index - b.index;\n}\n/**\n * Returns the distance from a point to a line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The coordinates of the point from\n *        which to calculate the distance.\n * @param {SegmentData} segmentData The object describing the line\n *        segment we are calculating the distance to.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {number} The square of the distance between a point and a line segment.\n */\nfunction projectedDistanceToSegmentDataSquared(pointCoordinates, segmentData, projection) {\n  var geometry = segmentData.geometry;\n  if (geometry.getType() === _GeometryType.default.CIRCLE) {\n    var circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */geometry;\n    if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n      var userProjection = (0, _proj.getUserProjection)();\n      if (userProjection) {\n        circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */circleGeometry.clone().transform(userProjection, projection);\n      }\n      var distanceToCenterSquared = (0, _coordinate.squaredDistance)(circleGeometry.getCenter(), (0, _proj.fromUserCoordinate)(pointCoordinates, projection));\n      var distanceToCircumference = Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();\n      return distanceToCircumference * distanceToCircumference;\n    }\n  }\n  var coordinate = (0, _proj.fromUserCoordinate)(pointCoordinates, projection);\n  tempSegment[0] = (0, _proj.fromUserCoordinate)(segmentData.segment[0], projection);\n  tempSegment[1] = (0, _proj.fromUserCoordinate)(segmentData.segment[1], projection);\n  return (0, _coordinate.squaredDistanceToSegment)(coordinate, tempSegment);\n}\n/**\n * Returns the point closest to a given line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The point to which a closest point\n *        should be found.\n * @param {SegmentData} segmentData The object describing the line\n *        segment which should contain the closest point.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {import(\"../coordinate.js\").Coordinate} The point closest to the specified line segment.\n */\nfunction closestOnSegmentData(pointCoordinates, segmentData, projection) {\n  var geometry = segmentData.geometry;\n  if (geometry.getType() === _GeometryType.default.CIRCLE && segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n    var circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */geometry;\n    var userProjection = (0, _proj.getUserProjection)();\n    if (userProjection) {\n      circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */circleGeometry.clone().transform(userProjection, projection);\n    }\n    return (0, _proj.toUserCoordinate)(circleGeometry.getClosestPoint((0, _proj.fromUserCoordinate)(pointCoordinates, projection)), projection);\n  }\n  var coordinate = (0, _proj.fromUserCoordinate)(pointCoordinates, projection);\n  tempSegment[0] = (0, _proj.fromUserCoordinate)(segmentData.segment[0], projection);\n  tempSegment[1] = (0, _proj.fromUserCoordinate)(segmentData.segment[1], projection);\n  return (0, _proj.toUserCoordinate)((0, _coordinate.closestOnSegment)(coordinate, tempSegment), projection);\n}\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  var style = (0, _Style.createEditingStyle)();\n  return function (feature, resolution) {\n    return style[_GeometryType.default.POINT];\n  };\n}\nvar _default = exports.default = Modify;"},"sourceMaps":null,"error":null,"hash":"48dff2960965fac8206d317a80afdbed","cacheData":{"env":{}}}